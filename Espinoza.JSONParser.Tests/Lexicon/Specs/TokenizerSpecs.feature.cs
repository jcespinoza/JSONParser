// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Espinoza.JSONParser.Tests.Lexicon.Specs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class TokenizerSpecsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "TokenizerSpecs.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Tokenizer Specs", "\tIn order interpret C code\r\n\tAs a Compiler designer\r\n\tI want to be able to parse " +
                    "a C source code file", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "Tokenizer Specs")))
            {
                Espinoza.JSONParser.Tests.Lexicon.Specs.TokenizerSpecsFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("When the end of the file is reached it should handle it correctly")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Tokenizer Specs")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Lexicon")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("HappyPath")]
        public virtual void WhenTheEndOfTheFileIsReachedItShouldHandleItCorrectly()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("When the end of the file is reached it should handle it correctly", new string[] {
                        "Lexicon",
                        "HappyPath"});
#line 8
 this.ScenarioSetup(scenarioInfo);
#line hidden
#line 9
  testRunner.Given("a source code string", "", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 13
  testRunner.And("a new Lexicon component", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 14
  testRunner.When("I get the next available token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 15
  testRunner.Then("the Token should be of type EndOfFile", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Parsing a Single Line Succeeds")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Tokenizer Specs")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Lexicon")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("HappyPath")]
        public virtual void ParsingASingleLineSucceeds()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parsing a Single Line Succeeds", new string[] {
                        "Lexicon",
                        "HappyPath"});
#line 19
 this.ScenarioSetup(scenarioInfo);
#line hidden
#line 20
  testRunner.Given("a source code string", "{\r\n\t\"name\" : \"test\"\r\n}", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 26
  testRunner.And("a new Lexicon component", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 27
  testRunner.When("I get the next available token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 28
  testRunner.Then("the Token should be of type PunctLeftCurlyBrace", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 29
  testRunner.And("the Token should have \"{\" as lexemme", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 30
  testRunner.When("I get the next available token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 31
  testRunner.Then("the Token should be of type DoubleQuoteString", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 32
  testRunner.And("the Token should have \"\"name\"\" as lexemme", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 33
  testRunner.When("I get the next available token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 34
  testRunner.Then("the Token should be of type PunctColon", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 35
  testRunner.And("the Token should have \":\" as lexemme", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 36
  testRunner.When("I get the next available token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 37
  testRunner.Then("the Token should be of type DoubleQuoteString", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 38
  testRunner.And("the Token should have \"\"test\"\" as lexemme", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 39
  testRunner.When("I get the next available token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 40
  testRunner.Then("the Token should be of type PunctRightCurlyBrace", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 41
  testRunner.And("the Token should have \"}\" as lexemme", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Lexer is able to parse valid identifiers")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Tokenizer Specs")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Lexicon")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("HappyPath")]
        public virtual void LexerIsAbleToParseValidIdentifiers()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Lexer is able to parse valid identifiers", new string[] {
                        "Lexicon",
                        "HappyPath"});
#line 45
 this.ScenarioSetup(scenarioInfo);
#line hidden
#line 46
  testRunner.Given("a source code string", "{ \"name\" : \"test\" }", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 50
  testRunner.And("a new Lexicon component", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 51
  testRunner.When("I parse the whole source code", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Lexemme",
                        "TokenType",
                        "Column",
                        "Line"});
            table1.AddRow(new string[] {
                        "{",
                        "PunctLeftCurlyBrace",
                        "1",
                        "1"});
            table1.AddRow(new string[] {
                        "\"name\"",
                        "DoubleQuoteString",
                        "3",
                        "1"});
            table1.AddRow(new string[] {
                        ":",
                        "PunctColon",
                        "9",
                        "1"});
            table1.AddRow(new string[] {
                        "\"test\"",
                        "DoubleQuoteString",
                        "12",
                        "1"});
            table1.AddRow(new string[] {
                        "}",
                        "PunctRightCurlyBrace",
                        "19",
                        "1"});
            table1.AddRow(new string[] {
                        "EOF",
                        "EndOfFile",
                        "20",
                        "1"});
#line 52
  testRunner.Then("the tokens should be these", ((string)(null)), table1, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Lexer is able to parse all reserved words")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Tokenizer Specs")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Lexicon")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("HappyPath")]
        public virtual void LexerIsAbleToParseAllReservedWords()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Lexer is able to parse all reserved words", new string[] {
                        "Lexicon",
                        "HappyPath"});
#line 63
 this.ScenarioSetup(scenarioInfo);
#line hidden
#line 64
  testRunner.Given("a source code string", "null", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 68
  testRunner.And("a new Lexicon component", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 69
  testRunner.When("I parse the whole source code", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Lexemme",
                        "TokenType",
                        "Column",
                        "Line"});
            table2.AddRow(new string[] {
                        "null",
                        "ReservedWordNull",
                        "1",
                        "1"});
            table2.AddRow(new string[] {
                        "EOF",
                        "EndOfFile",
                        "5",
                        "1"});
#line 70
  testRunner.Then("the tokens should be these", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Ability to parse a complete source code file")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Tokenizer Specs")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Lexicon")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("HappyPath")]
        public virtual void AbilityToParseACompleteSourceCodeFile()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Ability to parse a complete source code file", new string[] {
                        "Lexicon",
                        "HappyPath"});
#line 78
 this.ScenarioSetup(scenarioInfo);
#line hidden
#line 79
  testRunner.Given("a source code string", "", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 83
  testRunner.And("a new Lexicon component", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 84
  testRunner.When("I parse the whole source code", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Lexemme",
                        "TokenType",
                        "Column",
                        "Line"});
            table3.AddRow(new string[] {
                        "EOF",
                        "EndOfFile",
                        "1",
                        "1"});
#line 85
  testRunner.Then("the tokens should be these", ((string)(null)), table3, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
