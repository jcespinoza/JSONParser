// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Espinoza.JSONParser.Tests.Syntax.Specs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class GeneralSyntaxSpecsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "GeneralSyntaxSpecs.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "General Syntax Specs", "\tIn order to ensure JSON is written correctly\r\n\tAs a compilers designer\r\n\tI want " +
                    "to be able to validate the syntax of a json file", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "General Syntax Specs")))
            {
                Espinoza.JSONParser.Tests.Syntax.Specs.GeneralSyntaxSpecsFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("An empty file is valid")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "General Syntax Specs")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Syntax")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CompleteJSON")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("HappyPath")]
        public virtual void AnEmptyFileIsValid()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("An empty file is valid", new string[] {
                        "Syntax",
                        "CompleteJSON",
                        "HappyPath"});
#line 9
 this.ScenarioSetup(scenarioInfo);
#line hidden
#line 10
  testRunner.Given("a source code string", "", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 14
  testRunner.And("a new Lexicon component", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 15
  testRunner.And("a new Syntax Component", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 16
  testRunner.When("I run syntax analysis on it", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 17
  testRunner.Then("the operation should complete without error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("A JSON can be an empty object")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "General Syntax Specs")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Syntax")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CompleteJSON")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("HappyPath")]
        public virtual void AJSONCanBeAnEmptyObject()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A JSON can be an empty object", new string[] {
                        "Syntax",
                        "CompleteJSON",
                        "HappyPath"});
#line 22
 this.ScenarioSetup(scenarioInfo);
#line hidden
#line 23
  testRunner.Given("a source code string", "{\r\n\r\n}", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 29
  testRunner.And("a new Lexicon component", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 30
  testRunner.And("a new Syntax Component", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 31
  testRunner.When("I run syntax analysis on it", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 32
  testRunner.Then("the operation should complete without error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("A JSON file can be an string")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "General Syntax Specs")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Syntax")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CompleteJSON")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("HappyPath")]
        public virtual void AJSONFileCanBeAnString()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A JSON file can be an string", new string[] {
                        "Syntax",
                        "CompleteJSON",
                        "HappyPath"});
#line 37
 this.ScenarioSetup(scenarioInfo);
#line hidden
#line 38
  testRunner.Given("a source code string", "\"this is a string\"", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 42
  testRunner.And("a new Lexicon component", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 43
  testRunner.And("a new Syntax Component", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 44
  testRunner.When("I run syntax analysis on it", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 45
  testRunner.Then("the operation should complete without error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("A JSON file can be an empty array")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "General Syntax Specs")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Syntax")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CompleteJSON")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("HappyPath")]
        public virtual void AJSONFileCanBeAnEmptyArray()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A JSON file can be an empty array", new string[] {
                        "Syntax",
                        "CompleteJSON",
                        "HappyPath"});
#line 50
 this.ScenarioSetup(scenarioInfo);
#line hidden
#line 51
  testRunner.Given("a source code string", "[]", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 55
  testRunner.And("a new Lexicon component", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 56
  testRunner.And("a new Syntax Component", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 57
  testRunner.When("I run syntax analysis on it", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 58
  testRunner.Then("the operation should complete without error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("A JSON file can be an integer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "General Syntax Specs")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Syntax")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CompleteJSON")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("HappyPath")]
        public virtual void AJSONFileCanBeAnInteger()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A JSON file can be an integer", new string[] {
                        "Syntax",
                        "CompleteJSON",
                        "HappyPath"});
#line 64
 this.ScenarioSetup(scenarioInfo);
#line hidden
#line 65
  testRunner.Given("a source code string", "15", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 69
  testRunner.And("a new Lexicon component", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 70
  testRunner.And("a new Syntax Component", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 71
  testRunner.When("I run syntax analysis on it", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 72
  testRunner.Then("the operation should complete without error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("A JSON file can be a floating point number")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "General Syntax Specs")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Syntax")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CompleteJSON")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("HappyPath")]
        public virtual void AJSONFileCanBeAFloatingPointNumber()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A JSON file can be a floating point number", new string[] {
                        "Syntax",
                        "CompleteJSON",
                        "HappyPath"});
#line 77
 this.ScenarioSetup(scenarioInfo);
#line hidden
#line 78
  testRunner.Given("a source code string", "3.141592654", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 82
  testRunner.And("a new Lexicon component", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 83
  testRunner.And("a new Syntax Component", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 84
  testRunner.When("I run syntax analysis on it", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 85
  testRunner.Then("the operation should complete without error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("A JSON object must have a key value pair after each comma")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "General Syntax Specs")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Syntax")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CompleteJSON")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ExceptionPath")]
        public virtual void AJSONObjectMustHaveAKeyValuePairAfterEachComma()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A JSON object must have a key value pair after each comma", new string[] {
                        "Syntax",
                        "CompleteJSON",
                        "ExceptionPath"});
#line 90
 this.ScenarioSetup(scenarioInfo);
#line hidden
#line 91
  testRunner.Given("a source code string", "{\r\n  \"test\": \"name\",\r\n}", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 97
  testRunner.And("a new Lexicon component", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 98
  testRunner.And("a new Syntax Component", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 99
  testRunner.When("I run syntax analysis on it", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 100
  testRunner.Then("the operation should raise a syntax error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("A JSON file might be a complex JSON object")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "General Syntax Specs")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Syntax")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CompleteJSON")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("HappyPath")]
        public virtual void AJSONFileMightBeAComplexJSONObject()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A JSON file might be a complex JSON object", new string[] {
                        "Syntax",
                        "CompleteJSON",
                        "HappyPath"});
#line 105
 this.ScenarioSetup(scenarioInfo);
#line hidden
#line 106
  testRunner.Given("a source code string", "{\r\n  \"firstName\": \"Juan\",\r\n  \"middleName\": \"Carlos\",\r\n  \"lastName\": \"Espinoza\",\r\n" +
                    "  \"age\": 23,\r\n  \"pendingClasses\":[\r\n\t\"Compilers II\",\r\n\t\"Database Theory II\",\r\n\t\"" +
                    "Networking\"\r\n  ],\r\n  \"averageIndex\": 81.5,\r\n  \"universityDegree\": null\r\n}", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 122
  testRunner.And("a new Lexicon component", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 123
  testRunner.And("a new Syntax Component", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 124
  testRunner.When("I run syntax analysis on it", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 125
  testRunner.Then("the operation should complete without error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("An object must be completed")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "General Syntax Specs")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Syntax")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CompleteJSON")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ExceptionPath")]
        public virtual void AnObjectMustBeCompleted()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("An object must be completed", new string[] {
                        "Syntax",
                        "CompleteJSON",
                        "ExceptionPath"});
#line 130
 this.ScenarioSetup(scenarioInfo);
#line hidden
#line 131
  testRunner.Given("a source code string", "{ {", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 135
  testRunner.And("a new Lexicon component", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 136
  testRunner.And("a new Syntax Component", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 137
  testRunner.When("I run syntax analysis on it", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 138
  testRunner.Then("the operation should raise a syntax error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
